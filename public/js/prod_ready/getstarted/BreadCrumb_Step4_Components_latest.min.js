(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        "use strict";

        function thisStep(e) {
            return e ? void(step = e) : +step
        }

        function submitRecruitmeModal(e) {
            var t = $("#recruitMeModal").serialize();
            $.ajax({
                url: "/ajax/recruiteme/" + e,
                headers: {
                    "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                },
                data: t,
                type: "POST"
            }).done(function(e, t, a) {
                7 === thisStep() ? justInquired(e.inquired_list) : (removeRedirected(), window.location.href = "/portal"), $("#recruitMeModal").foundation("reveal", "close")
            })
        }

        function wasRedirected() {
            return JSON.parse(sessionStorage.getItem("college_id"))
        }

        function removeRedirected() {
            sessionStorage.removeItem("college_id")
        }

        function restOfStepsDone(e) {
            return !!e && void(is_done = e)
        }

        function currentPercentage(e) {
            return e && (percentage = e), percentage
        }

        function openRecruitModal(e) {
            if (e) {
                var t = $("#recruitmeModal");
                $.ajax({
                    url: "/ajax/recruitme/" + e,
                    type: "GET",
                    headers: {
                        "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                    }
                }).done(function(e) {
                    t.html(e), t.find("#recruitmeModal").foundation("reveal", "open")
                })
            }
        }
        var step = null,
            is_done = !1,
            percentage = 0;
        window.onbeforeunload = function() {
            removeRedirected()
        };
        var GetStarted_Breadcrumb_Component = React.createClass({
                displayName: "GetStarted_Breadcrumb_Component",
                getInitialState: function() {
                    return {
                        num_of_steps: 8,
                        max_steps: 5,
                        step_crumbs: null,
                        steps: null,
                        active_step: null,
                        steps_completed: null,
                        percentage: 0,
                        badges: [],
                        badges_ui: null
                    }
                },
                componentWillMount: function() {
                    var e, t = [],
                        a = [],
                        r = null,
                        n = null,
                        s = null,
                        c = $("#get_started_breakcrumb"),
                        i = this.state.badges.slice(),
                        o = !0,
                        l = function(e, t) {
                            this.name = e || "", this.locked = "boolean" != typeof t || t
                        };
                    s = c.data("steps-completed"), e = c.data("currentStep");
                    for (var d = 1; d <= this.state.num_of_steps; d++) r = {
                        name: "Step " + d,
                        is_active: parseInt(d) === parseInt(e),
                        num: parseInt(d),
                        currStep: parseInt(e),
                        done: s["step_" + d + "_complete"],
                        total_num_of_steps: this.state.max_steps
                    }, r.is_active && (n = r), a.push(r), d <= this.state.max_steps && t.push(React.createElement(Step, {
                        key: d,
                        stepObj: r
                    })); + s.profile_percent >= 30 && (o = !o), i.push(new l("basic", o)), i.push(new l("premium")), this.state.badges = i, this.initBadges(), this.setState({
                        step_crumbs: t,
                        current_step: e,
                        active_step: n,
                        percentage: s.profile_percent
                    }), thisStep(e)
                },
                componentDidMount: function() {
                    $(document).on("saved", this.handleRedirected)
                },
                handleRedirected: function() {
                    var e = currentPercentage(),
                        t = wasRedirected();
                    e && _.isNumber(+e) && (this.setState({
                        percentage: +e
                    }), t && 30 === +e ? openRecruitModal(t) : window.location.href = "/get_started")
                },
                initBadges: function() {
                    var e = this.state.badges.slice(),
                        t = [];
                    _.each(e, function(e, a) {
                        t.push(React.createElement(ProfileBadges, {
                            key: a,
                            badge: e
                        }))
                    }), this.state.badges_ui = t
                },
                render: function() {
                    var e = "Congrats you're ready to be recruited!";
                    return React.createElement("div", {
                        className: "breadcrumb-container text-center"
                    }, 8 === this.state.active_step.num ? React.createElement("div", {
                        className: "congrats text-left"
                    }, e) : React.createElement("div", {
                        className: "breadcrumb-bar clearfix"
                    }, this.state.step_crumbs), this.state.badges_ui, React.createElement(ProfileMeter, {
                        perc: this.state.percentage
                    }))
                }
            }),
            Step = React.createClass({
                displayName: "Step",
                getInitialState: function() {
                    return {}
                },
                ableToRoute: function(e) {
                    var t = this.props.stepObj;
                    t.done || e.preventDefault()
                },
                render: function() {
                    var e = this.props.stepObj,
                        t = "icon icon-" + e.num,
                        a = "step",
                        r = "/get_started/" + e.num;
                    return e.is_active && (a += " active"), e.done ? a += " done" : r = "", React.createElement("div", {
                        className: a
                    }, React.createElement("a", {
                        href: r,
                        onClick: this.ableToRoute
                    }, React.createElement("div", {
                        className: t
                    }), React.createElement("div", {
                        className: "step-num"
                    }, "Step ", e.num, " ", React.createElement("span", {
                        className: "show-for-small-only"
                    }, " of ", e.total_num_of_steps))))
                }
            }),
            ProfileMeter = React.createClass({
                displayName: "ProfileMeter",
                componentDidMount: function() {
                    this.findOffset()
                },
                findOffset: function() {
                    var e, t = parseInt(this.props.perc),
                        a = $("#svg #bar"),
                        r = 0,
                        n = 496,
                        s = 364,
                        c = n - s;
                    (!_.isNumber(t) || t < 0) && (t = 0), t > 100 && (t = 100), e = t / 100 * c, r = n - e, a.animate({
                        strokeDashoffset: r
                    }, "slow")
                },
                render: function() {
                    return React.createElement("div", {
                        className: "meter-container hide-for-small-only"
                    }, React.createElement("div", {
                        id: "cont",
                        "data-pct": this.props.perc
                    }, React.createElement("svg", {
                        id: "svg",
                        width: "60",
                        height: "60",
                        viewPort: "0 0 100 100",
                        version: "1.1",
                        xmlns: "http://www.w3.org/2000/svg"
                    }, React.createElement("circle", {
                        r: "21",
                        cx: "30",
                        cy: "30",
                        fill: "transparent"
                    }), React.createElement("circle", {
                        id: "bar",
                        r: "21",
                        cx: "30",
                        cy: "30",
                        fill: "transparent"
                    }))))
                }
            }),
            ProfileBadges = React.createClass({
                displayName: "ProfileBadges",
                render: function() {
                    var e = this.props.badge,
                        t = "bimg badge " + e.name;
                    return React.createElement("div", {
                        className: "profile-badges hide-for-small-only"
                    }, React.createElement("div", {
                        className: t
                    }, e.locked ? React.createElement("div", {
                        className: "bimg locked"
                    }) : null))
                }
            });
        ReactDOM.render(React.createElement(GetStarted_Breadcrumb_Component, null), document.getElementById("get_started_breakcrumb"));
    }, {}]
}, {}, [1]);

(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        "use strict";

        function wasRedirected() {
            return JSON.parse(sessionStorage.getItem("college_id"))
        }

        function currentPercentage(e) {
            return e && (percentage = e), percentage
        }
        var percentage, styles = {
                bad: {
                    border: "1px solid firebrick"
                },
                good: {
                    border: "1px solid skyblue"
                },
                bad_code: {
                    borderTopColor: "firebrick",
                    borderLeftColor: "firebrick",
                    borderBottomColor: "firebrick"
                }
            },
            GetStarted_Step4_Component = React.createClass({
                displayName: "GetStarted_Step4_Component",
                getInitialState: function() {
                    return {
                        save_route: "/get_started/save",
                        get_route: "/get_started/getDataFor/step",
                        confirm_code_route: "/get_started/checkPhoneConfirmation",
                        resend_code_route: "/get_started/sendPhoneConfirmation",
                        new_phone_num_route: "/get_started/saveNewPhone",
                        validate_with_twilio_route: "/get_started/validatePhone",
                        step_num: null,
                        is_valid: !1,
                        is_sending: !1,
                        back_route: null,
                        next_route: null,
                        save_btn_classes: "right btn submit-btn text-center",
                        save_has_been_clicked: !1,
                        needConfirmation: !1,
                        _zipValid: !0,
                        confirmationCode: "",
                        _formValid: !1,
                        country_list: [],
                        unique_countries: [],
                        states: [],
                        openDialingCodes: !1
                    }
                },
                componentWillMount: function() {
                    var e, t, a;
                    this.state.save_btn_classes;
                    fbq("track", "GetStarted_Step6_PhoneNumber_Page"), this.state.step_num = $(".gs_step").data("step"), this.state.get_route += this.state.step_num, a = parseInt(this.state.step_num), e = a - 1, t = a + 1, this.state.back_route = "/get_started/" + e, this.state.next_route = "/get_started/" + t, this._getData(), this._getCountries(), this._getStates()
                },
                _getData: function() {
                    var e = this;
                    $.ajax({
                        url: "/get_started/getDataFor/step6",
                        type: "GET",
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(t) {
                        t && _.isObject(t) && !_.isEmpty(t) && e._initData(t)
                    })
                },
                _initData: function(e) {
                    var t = {};
                    this.setState(_.extend({}, e));
                    for (var a in e) e.hasOwnProperty(a) && "txt_opt_in" !== a && "dialing_code" !== a && (t.id = "_" + a, t.name = a, t.value = e[a], this._validate(t))
                },
                _getStates: function() {
                    var e = this;
                    $.ajax({
                        url: "/get_started/getDataFor/states",
                        type: "GET",
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(t) {
                        e._initStates(t)
                    })
                },
                _initStates: function(e) {
                    this.setState({
                        states: e
                    })
                },
                _getCountries: function() {
                    var e = this;
                    $.ajax({
                        url: "/get_started/getDataFor/country",
                        type: "GET",
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(t) {
                        e._initCountries(t)
                    })
                },
                _initCountries: function(e) {
                    this.setState({
                        unique_countries: e,
                        country_list: e
                    })
                },
                _save: function(e) {
                    e.preventDefault();
                    var t = this,
                        a = this.state,
                        n = new FormData($("form")[0]);
                    a.enableConfirmationCode && (this.setState({
                        is_sending: !0
                    }), $.ajax({
                        url: a.save_route,
                        type: "POST",
                        data: n,
                        enctype: "multipart/form-data",
                        contentType: !1,
                        processData: !1,
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(e) {
                        if (e && _.isObject(e) && !_.isNumber(e)) t.setState({
                            is_sending: !1,
                            err: e.error,
                            errMsg: e.msg
                        });
                        else {
                            amplitude.getInstance().logEvent("step4_completed", {
                                content: "Contact Info"
                            }), currentPercentage(e);
                            var n = $("#_text").is(":checked");
                            n ? (t.setState({
                                is_sending: !1,
                                needConfirmation: !0
                            }), t._resendCode()) : window.location.href = a.next_route
                        }
                        wasRedirected() ? t.setState({
                            is_sending: !1
                        }) : a.needConfirmation && (window.location.href = a.next_route)
                    }))
                },
                _keyPressed: function(e) {
                    (e.charCode < 48 || e.charCode > 57) && e.preventDefault()
                },
                _resetConfirmation: function() {
                    this.setState({
                        needConfirmation: !1
                    })
                },
                _validate: function(e) {
                    var t = !1,
                        a = e.target ? e.target.id : e.id,
                        n = e.target ? e.target.getAttribute("name") : e.name,
                        s = e.target ? e.target.value : e.value;
                    switch (n) {
                        case "phone":
                            t = !0;
                            break;
                        case "address":
                            /^[a-zA-Z0-9\.,#\- ]+$/.test(s) && s && (t = !0);
                            break;
                        case "city":
                            /^[a-zA-Z\.\- ]+$/.test(s) && s && (t = !0);
                            break;
                        case "country":
                            1 === +s ? (t = !0, this.state.state, this.state.zip || (this.state._stateValid = !1, this.state._stateValidated = !0, this.state._zipValid = !1, this.state._zipValidated = !0)) : s && (t = !0, this.state._zipValid = !0, this.state._zipValidated = !0), s = +s;
                            break;
                        case "state":
                            1 === this.state.country ? s && (t = !0) : t = !0;
                            break;
                        case "zip":
                            1 === this.state.country ? t = !!s && !!/^[a-zA-Z0-9\.,\- ]+$/.test(s) : t = !0;
                            break;
                        case "code":
                            s && 4 === s.length && _.isNumber(+s) && +s >= 1e3 && +s <= 9999 && (t = !0);
                            break;
                        default:
                            return
                    }
                    this.state[n] = s, this.state[a + "Valid"] = t, this.state[a + "Validated"] = !0, this.state.focused = a, this._enableNextIfFormIsValid()
                },
                _validatePhone: function(e) {
                    this.setState({
                        phone: e.target.value
                    }), this._validateWithTwilio(e.target.value)
                },
                _validateWithTwilio: function(e, t) {
                    var a = this,
                        n = this.state,
                        s = "",
                        i = "",
                        o = "";
                    s = e || n.phone, i = t || n.dialing_code, o = i + s, $.ajax({
                        url: "/phone/validatePhoneNumber",
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        },
                        data: {
                            phone: o
                        },
                        type: "POST"
                    }).done(function(e) {
                        if (e && _.isObject(e) && _.has(e, "error")) {
                            var t = !1,
                                t = !e.error;
                            if (t) {
                                var n = e.phoneNumber.substr(e.country_phone_code.length, e.phoneNumber.length),
                                    s = e.country_phone_code + " " + n;
                                a.state.formatted_phone = s
                            }
                            a.state._phoneValid = t, a.state._phoneValidated = !0, a.state.focused = "_phone", a._enableNextIfFormIsValid()
                        }
                    })
                },
                _enableNextIfFormIsValid: function() {
                    var e = this.state,
                        t = !1,
                        a = {};
                    e.needConfirmation ? (e._confirmationCodeValid && (t = !0), a.enableNextStep = t) : (e._countryValid && e._addressValid && e._cityValid && e._stateValid && e._zipValid && (t = !0), a.enableConfirmationCode = t), this.setState(a)
                },
                _toggleDialingCodes: function() {
                    this.setState({
                        openDialingCodes: !this.state.openDialingCodes
                    })
                },
                _updateCode: function(e) {
                    var t = e.country_phone_code;
                    this.setState({
                        dialing_code: t,
                        openDialingCodes: !1
                    }), this._validateWithTwilio(null, t)
                },
                _toNextPage: function() {
                    var e = $("#_text").is(":checked");
                    e ? (this._resendCode(), this.setState({
                        err: !1,
                        needConfirmation: !0
                    })) : window.location.href = this.state.next_route
                },
                _closeDifferentCountryModal: function(e) {
                    this.setState({
                        err: !1
                    })
                },
                _togglePhoneEditor: function() {
                    this.setState({
                        openPhoneEditor: !this.state.openPhoneEditor
                    })
                },
                _confirmCode: function(e) {
                    e.preventDefault();
                    var t = this,
                        a = this.state,
                        n = new FormData($("form")[0]),
                        s = null;
                    this.setState({
                        is_sending: !0
                    }), $.ajax({
                        url: a.confirm_code_route,
                        type: "POST",
                        data: n,
                        enctype: "multipart/form-data",
                        contentType: !1,
                        processData: !1,
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(e) {
                        s = JSON.parse(e), s && "success" === s.response ? (t.setState({
                            is_sending: !1
                        }), window.location.href = a.next_route) : (t.setState({
                            confirmation_err: !0,
                            confirmation_msg: s.response,
                            is_sending: !1,
                            resend_done: !0
                        }), t._showConfirmErrMsg())
                    })
                },
                _showConfirmErrMsg: function() {
                    var e = this;
                    setTimeout(function() {
                        e.setState({
                            confirmation_err: !1
                        })
                    }, 1e4)
                },
                _resendCode: function(e) {
                    e && e.preventDefault();
                    var t = this,
                        a = this.state,
                        n = null,
                        s = "";
                    this.setState({
                        is_sending: !0
                    }), $.ajax({
                        url: a.resend_code_route,
                        type: "POST",
                        data: {
                            phone: a.phone,
                            dialing_code: a.dialing_code
                        },
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(e) {
                        try {
                            n = JSON.parse(e)
                        } catch (a) {
                            var i = e.match(/{.*}/) && e.match(/{.*}/).join("");
                            n = JSON.parse(i)
                        }
                        s = "failed" === n.response ? "Failed to send phone authentication code to this number. Please input your correct phone number and country calling number." : n.response, "failed" == n.response && n.error_message && n.error_message.includes("reached the maximum") && (s = n.error_message), t.setState({
                            is_sending: !1,
                            resend_done: !1,
                            resend_msg: s,
                            confirmation_err: !1
                        }), t._showResendMsg()
                    })
                },
                _showResendMsg: function() {
                    var e = this;
                    setTimeout(function() {
                        e.setState({
                            resend_done: !0
                        })
                    }, 2e4)
                },
                _skipConfirmationCode: function() {
                    window.location.href = this.state.next_route
                },
                _saveNewNumber: function(e) {
                    e.preventDefault();
                    var t = this,
                        a = this.state;
                    this.setState({
                        is_sending: !0
                    }), $.ajax({
                        url: a.new_phone_num_route,
                        type: "POST",
                        data: {
                            phone: a.phone,
                            dialing_code: a.dialing_code
                        },
                        headers: {
                            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
                        }
                    }).done(function(e) {
                        e && "success" === e.response && (t.setState({
                            is_sending: !1,
                            newNumberSaved: !0,
                            newNumberMsg: e.msg,
                            openPhoneEditor: !1
                        }), t._showNewNumberMsg())
                    })
                },
                _showNewNumberMsg: function() {
                    var e = this;
                    setTimeout(function() {
                        e.setState({
                            newNumberSaved: !1
                        })
                    }, 1e4)
                },
                render: function() {
                    var e = this.state,
                        t = this;
                    return React.createElement("div", {
                        className: "step_container"
                    }, React.createElement("div", {
                        className: "row phone-container"
                    }, React.createElement("div", {
                        className: "column small-12"
                    }, React.createElement("form", {
                        onSubmit: this._save
                    }, React.createElement("input", {
                        type: "hidden",
                        name: "step",
                        value: e.step_num
                    }), e.needConfirmation ? React.createElement("div", {
                        className: "row text-center text-wrapper"
                    }, React.createElement("div", {
                        className: "text-title"
                    }, "We've sent you an SMS code to"), e.openPhoneEditor ? React.createElement("div", {
                        className: "phone-editor-container"
                    }, React.createElement("div", {
                        className: "row collapse"
                    }, React.createElement("div", {
                        className: "columns small-9"
                    }, React.createElement("input", {
                        id: "_phone",
                        name: "phone",
                        type: "text",
                        className: "phone-num",
                        onChange: this._validatePhone,
                        onFocus: this._validatePhone,
                        value: e.phone || "",
                        style: "_phone" === e.focused ? e._phoneValid ? styles.good : styles.bad : e._phoneValidated && !e._phoneValid ? styles.bad : {},
                        placeholder: "Enter phone number"
                    }), React.createElement("div", {
                        className: "dialing-codes-btn editing"
                    }, React.createElement("span", {
                        onClick: this._toggleDialingCodes
                    }, e.dialing_code ? "+" + e.dialing_code : ""), React.createElement("div", {
                        className: "arrow",
                        onClick: this._toggleDialingCodes
                    })), e.openDialingCodes ? React.createElement("div", {
                        className: "dialing-codes-container editing"
                    }, e.unique_countries.map(function(e) {
                        return React.createElement(DialingCode, {
                            key: e.id + "_" + e.country_code,
                            country: e,
                            updateCode: t._updateCode
                        })
                    })) : null), React.createElement("div", {
                        className: "columns small-3"
                    }, React.createElement("button", {
                        className: "button save-edited-phone",
                        onClick: this._saveNewNumber
                    }, "Save")), e._phoneValidated && !e._phoneValid ? React.createElement("div", {
                        className: "columns small-12 text-left",
                        style: {
                            color: "firebrick",
                            margin: "-24px 0 0"
                        }
                    }, React.createElement("small", null, "Invalid phone number. Is your country code correct?")) : null)) : React.createElement("div", {
                        className: "text-phone"
                    }, e.phone ? "+" + e.dialing_code + " " + e.phone : ""), e.newNumberSaved && _.isBoolean(e.newNumberSaved) ? React.createElement("div", {
                        className: "new-phone-success"
                    }, e.newNumberMsg || "") : null, React.createElement("div", {
                        className: "text-center"
                    }, React.createElement("div", {
                        className: "text-changenum change cursor",
                        onClick: this._togglePhoneEditor
                    }, React.createElement("u", null, "Change Number"))), React.createElement("div", {
                        className: "text-options"
                    }, React.createElement("div", {
                        className: "text-changenum text-left"
                    }, "To complete your phone number verification, please enter your 4 digit code below."), React.createElement("input", {
                        id: "_confirmationCode",
                        type: "text",
                        name: "code",
                        value: e.code || "",
                        maxLength: 4,
                        onFocus: this._validate,
                        onChange: this._validate,
                        style: "_confirmationCode" === e.focused ? e._confirmationCodeValid ? styles.good : styles.bad : e._confirmationCodeValidated && !e._confirmationCodeValid ? styles.bad : {},
                        onKeyPress: this._keyPressed
                    })), React.createElement("div", {
                        className: "text-center"
                    }, React.createElement("div", {
                        className: "text-changenum cursor",
                        onClick: this._resendCode
                    }, React.createElement("u", null, "Resend code"))), _.isBoolean(e.resend_done) && !e.resend_done ? React.createElement("div", {
                        className: "err"
                    }, e.resend_msg || "") : null, _.isBoolean(e.confirmation_err) && e.confirmation_err ? React.createElement("div", {
                        className: "err"
                    }, e.confirmation_msg || "") : null, React.createElement("div", {
                        className: "text-options"
                    }, React.createElement("div", null, React.createElement("button", {
                        disabled: !e.enableNextStep,
                        onClick: this._confirmCode,
                        className: "phone-submit text-submit radius button"
                    }, "Confirm")), React.createElement("div", {
                        className: "clearfix"
                    }, React.createElement("div", {
                        className: "left cursor",
                        onClick: this._resetConfirmation
                    }, "Go back"), React.createElement(SkipModal, {
                        skip: this._skipConfirmationCode
                    })))) : React.createElement("div", {
                        className: "row"
                    }, React.createElement("h3", {
                        className: "columns small-12 phone-title"
                    }, "Colleges need a way to communicate with you"), React.createElement("div", {
                        className: "columns small-12 medium-4"
                    }, React.createElement("label", {
                        htmlFor: "_country"
                    }, "Country")), React.createElement("div", {
                        className: "columns small-12 medium-8"
                    }, React.createElement("select", {
                        id: "_country",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.country || "",
                        style: "_country" === e.focused ? e._countryValid ? styles.good : styles.bad : e._countryValidated && !e._countryValid ? styles.bad : {},
                        name: "country"
                    }, React.createElement("option", {
                        value: "",
                        disabled: "disabled"
                    }, "Select your country..."), e.country_list.map(function(e) {
                        return React.createElement("option", {
                            key: e.id,
                            value: e.id
                        }, e.country_name)
                    }))), React.createElement("div", {
                        className: "columns small-12 medium-4"
                    }, React.createElement("label", {
                        htmlFor: "_address"
                    }, "Address")), React.createElement("div", {
                        className: "columns small-12 medium-8"
                    }, React.createElement("input", {
                        id: "_address",
                        name: "address",
                        type: "text",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.address || "",
                        style: "_address" === e.focused ? e._addressValid ? styles.good : styles.bad : e._addressValidated && !e._addressValid ? styles.bad : {},
                        placeholder: "Enter address"
                    })), React.createElement("div", {
                        className: "columns small-12 medium-4"
                    }, React.createElement("label", {
                        htmlFor: "_city"
                    }, "City")), React.createElement("div", {
                        className: "columns small-12 medium-8"
                    }, React.createElement("input", {
                        id: "_city",
                        type: "text",
                        name: "city",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.city || "",
                        style: "_city" === e.focused ? e._cityValid ? styles.good : styles.bad : e._cityValidated && !e._cityValid ? styles.bad : {},
                        placeholder: "Enter city"
                    })), React.createElement("div", {
                        className: "columns small-12 medium-4"
                    }, React.createElement("label", {
                        htmlFor: "_state"
                    }, "State/Province")), React.createElement("div", {
                        className: "columns small-12 medium-4"
                    }, e.country && 1 == e.country ? React.createElement("select", {
                        id: "_state",
                        type: "text",
                        name: "state",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.state || "",
                        style: "_state" === e.focused ? e._stateValid ? styles.good : styles.bad : e._stateValidated && !e._stateValid ? styles.bad : {}
                    }, React.createElement("option", {
                        value: "",
                        disabled: "disabled"
                    }, "Select state..."), e.states.map(function(e) {
                        return React.createElement("option", {
                            key: e.state_abbr,
                            value: e.state_abbr
                        }, e.state_name)
                    })) : React.createElement("div", null, React.createElement("input", {
                        id: "_state",
                        type: "text",
                        name: "state",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.state || "",
                        style: "_state" === e.focused ? e._stateValid ? styles.good : styles.bad : e._stateValidated && !e._stateValid ? styles.bad : {},
                        placeholder: "Enter state/province"
                    }))), React.createElement("div", {
                        className: "columns small-12 medium-1 text-center"
                    }, React.createElement("label", {
                        htmlFor: "_zip"
                    }, "Zip")), React.createElement("div", {
                        className: "columns small-12 medium-3"
                    }, React.createElement("input", {
                        id: "_zip",
                        type: "text",
                        name: "zip",
                        onChange: this._validate,
                        onFocus: this._validate,
                        value: e.zip || "",
                        style: "_zip" === e.focused ? e._zipValid ? styles.good : styles.bad : e._zipValidated && !e._zipValid ? styles.bad : {},
                        placeholder: e.country && 1 == e.country ? "Zip" :"Zip (optional)"
                    })), React.createElement("div", {
                        className: "columns small-12 medium-6 phone-back"
                    }, React.createElement("a", {
                        href: e.back_route
                    }, "Go Back")), React.createElement("div", {
                        className: "columns small-12 medium-6 medium-text-right"
                    }, React.createElement("button", {
                        className: "phone-submit radius button",
                        disabled: !e.enableConfirmationCode
                    }, "Next")))))), React.createElement(DifferentCountryErrorModal, {
                        open: e.err,
                        closeModal: this._closeDifferentCountryModal,
                        toNext: this._toNextPage
                    }), e.is_sending ? React.createElement(Loader, null) : null)
                }
            }),
            DialingCode = React.createClass({
                displayName: "DialingCode",
                _update: function() {
                    this.props.updateCode(this.props.country)
                },
                render: function() {
                    var e = this.props.country;
                    return React.createElement("div", {
                        className: "codes",
                        onClick: this._update
                    }, React.createElement("div", {
                        className: "flag flag-" + e.country_code.toLowerCase()
                    }), React.createElement("div", {
                        className: "country-name"
                    }, e.country_name + " (+" + e.country_phone_code + ")"))
                }
            }),
            DifferentCountryErrorModal = React.createClass({
                displayName: "DifferentCountryErrorModal",
                _close: function() {
                    this.props.closeModal()
                },
                _next: function() {
                    this.props.toNext()
                },
                render: function() {
                    return this.props.open ? React.createElement("div", {
                        className: "skip-modal"
                    }, React.createElement("div", {
                        className: "skip-container"
                    }, React.createElement("div", {
                        className: "close text-right",
                        onClick: this._close
                    }, "x"), React.createElement("div", {
                        className: "title"
                    }, "We have noticed your country phone number differs from your country of origin. Make sure your country of origin is reflected properly on Plexuss."), React.createElement("div", {
                        className: "text-center"
                    }, React.createElement("button", {
                        onClick: this._next,
                        className: "skip-btn button radius"
                    }, "Ok")))) : null
                }
            }),
            SkipModal = React.createClass({
                displayName: "SkipModal",
                getInitialState: function() {
                    return {
                        open: !1
                    }
                },
                _skip: function() {
                    this.props.skip()
                },
                _toggle: function() {
                    this.setState({
                        open: !this.state.open
                    })
                },
                render: function() {
                    var e = this.state;
                    return React.createElement("div", {
                        className: "right",
                        onClick: this._toggle
                    }, React.createElement("span", {
                        className: "cursor"
                    }, "Skip"), e.open ? React.createElement("div", {
                        className: "skip-modal"
                    }, React.createElement("div", {
                        className: "skip-container"
                    }, React.createElement("div", {
                        className: "close text-right",
                        onClick: this._toggle
                    }, "x"), React.createElement("div", {
                        className: "title"
                    }, "By clicking Skip, you are opting out of receiving texts from colleges. You can always opt back in by going to your settings and allowing text notifications."), React.createElement("div", {
                        className: "text-center"
                    }, React.createElement("button", {
                        onClick: this._skip,
                        className: "skip-btn button radius"
                    }, "Ok")))) : null)
                }
            }),
            Loader = React.createClass({
                displayName: "Loader",
                render: function() {
                    var e = "gs-loader ";
                    return this.props.size && (e += this.props.size), React.createElement("div", {
                        className: e
                    }, React.createElement("svg", {
                        width: "70",
                        height: "20"
                    }, React.createElement("rect", {
                        width: "20",
                        height: "20",
                        x: "0",
                        y: "0",
                        rx: "3",
                        ry: "3"
                    }, React.createElement("animate", {
                        attributeName: "width",
                        values: "0;20;20;20;0",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "height",
                        values: "0;20;20;20;0",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "x",
                        values: "10;0;0;0;10",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "y",
                        values: "10;0;0;0;10",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    })), React.createElement("rect", {
                        width: "20",
                        height: "20",
                        x: "25",
                        y: "0",
                        rx: "3",
                        ry: "3"
                    }, React.createElement("animate", {
                        attributeName: "width",
                        values: "0;20;20;20;0",
                        begin: "200ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "height",
                        values: "0;20;20;20;0",
                        begin: "200ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "x",
                        values: "35;25;25;25;35",
                        begin: "200ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "y",
                        values: "10;0;0;0;10",
                        begin: "200ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    })), React.createElement("rect", {
                        width: "20",
                        height: "20",
                        x: "50",
                        y: "0",
                        rx: "3",
                        ry: "3"
                    }, React.createElement("animate", {
                        attributeName: "width",
                        values: "0;20;20;20;0",
                        begin: "400ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "height",
                        values: "0;20;20;20;0",
                        begin: "400ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "x",
                        values: "60;50;50;50;60",
                        begin: "400ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }), React.createElement("animate", {
                        attributeName: "y",
                        values: "10;0;0;0;10",
                        begin: "400ms",
                        dur: "1000ms",
                        repeatCount: "indefinite"
                    }))))
                }
            });
        ReactDOM.render(React.createElement(GetStarted_Step4_Component, null), document.getElementById("get_started_step4"));
    }, {}]
}, {}, [1]);
