import React from 'react';
import moment from 'moment';
import {connect} from 'react-redux';
import DatePicker from 'react-datepicker';
import {addScholarship} from './../../../actions/scholarshipsActions';
import {loadpopup, loadtabData, loadtabData_sc, nextFun} from './../../../actions/pickACollegeActions'

class AddModal extends React.Component{
	constructor(props){
		super(props);

		this.state = {
			scholarship_name: '',
			website: '',
			amount: '',
			numberof: '',
			recurring: '',
			description: '',
			submission_id: '',
			deadline: null,
			scholarship_name_valid: '',
			deadline_valid: true,
			website_valid: '',
			amount_valid: '',
			numberof_valid: '',
			submission_id_valid: true,
			
			country: '',
			location_country: '',
			state: '',
			location_state: '',
			city: '',
			location_city: '',
			startDateTerm:'',
			interested_in_aid: '',
			financial: '',
			typeofschool: '',
			department: '',
			specificDepartment_filter: '',
			gpa_max: '',
			sat_min: '',
			sat_max: '',
			act_min: '',
			act_max: '',
			toefl_min: '',
			toefl_max: '',
			ielts_min: '',
			ielts_max: '',
			uploads: '',
			uploads: '',
			ageMin_filter: '',
			ageMax_filter: '',
			gender: '',
			ethnicity: '',
			ethnicity_filter: '',
			religion: '',
			religion_filter: '',
			hs_users: '',
			college_users: '',
			inMilitary: '',
			militaryAffiliation: '',
			profileCompletion: '',
			
			provider_id: '',
			provider_name: '',
			contact_fname: '',
			contact_lname: '',
			provider_phone: '',
			provider_email: '',	
			provider_address: '',
			provider_city: '',	
			provider_state: '',	
			provider_zip: '',
			provider_country: '',
			provider_name_valid: '',
			contact_fname_valid: '',
			contact_lname_valid: '',
			provider_phone_valid: '',
			provider_email_valid: '',	
			provider_address_valid: '',
			provider_zip_valid: '',
			provider_city_valid: '',		

			step: 1,
		}

		this._getDescription = this._getDescription.bind(this);
		//this._next = this._next.bind(this);
		//this._prev = this._prev.bind(this);
		this._setInput = this._setInput.bind(this);
		this._typeDeadline = this._typeDeadline.bind(this);
		this._submit = this._submit.bind(this);
	}
	
	componentDidMount() { 
		let {setInput} = this.props;
		/*loadpopup(this.state);
		loadtabData_sc('location',this.state);
		loadtabData_sc('startDateTerm',this.state);
		loadtabData_sc('financial',this.state);
		loadtabData_sc('typeofschool',this.state);
		loadtabData_sc('majorDeptDegree',this.state);
		loadtabData_sc('scores',this.state);
		loadtabData_sc('uploads',this.state);
		loadtabData_sc('demographic',this.state);
		loadtabData_sc('educationLevel',this.state);
		loadtabData_sc('militaryAffiliation',this.state);
		loadtabData_sc('profileCompletion',this.state);*/
	}
	
	_setInput(name, value){
		let tmp = this.state;
		let mValue = value;
		let name_valid = name + "_valid";

		//could make them const outside
		//but so much simpler to see and manip right where we use them
		//only place currently that needs them too
		let strReg = /^[a-zA-Z0-9_'"#.,\-/: ]*$/g;
		let emailReg = /^[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~\-.]+[@]{1}[a-zA-Z]+[.][a-zA-Z]+$/g;
		let numReg = /^[0-9]+$/g;
		let amountReg = /^[0-9]*[.]*[0-9]*$/g;
		let phoneReg = /^[a-z0-9+\-_()#. ]+$/g;
		let dateReg = /^([0]*[1-9]|[1][0-2])[/]([0][1-9]|[1-2][0-9]|[3][0-1])[/][0-9]{4}$/g; 

		tmp[name] = mValue;

		//test to see if valid
		switch(name){
			case 'scholarship_name':
			case 'provider_name':
			case 'contact_fname':
			case 'contact_lname':
			case 'provider_address':
			case 'provider_city':
			case 'website':
				if(mValue.match(strReg) && mValue !== ''){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			case 'provider_email':
				if(mValue.match(emailReg) && mValue !== ''){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			case 'amount':
				if(mValue.match(amountReg) && mValue !== ''){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			case 'numberof':
			case 'provider_zip':
				if(mValue.match(numReg) && mValue !== '' && mValue !== '0'){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			case 'provider_phone':
				if(mValue.match(phoneReg) && mValue !== ''){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			case 'submission_id':
				if(mValue.match(numReg) || mValue.trim() === ''){
					tmp[name_valid] = true;
				}else{
					tmp[name_valid] = false;  //only set if not default
				}
				break;
			// case 'deadline':
			// 	if(value.match(dateReg) || value.trim() === ''){
			// 		tmp[name_valid] = true;
			// 	}else{
			// 		tmp[name_valid] = false;  //only set if not default
			// 	}
				// console.log("set: " , mValue, ": " , typeof mValue);
			default:

				break;
		}
			
		this.setState(tmp);
	}
	_typeDeadline(val){
		let tmp = this.state;
		let mValue = val;
		let name_valid = name + "_valid";
		let dateReg = /^([0]*[1-9]|[1][0-2])[/]([0][1-9]|[1-2][0-9]|[3][0-1])[/][0-9]{4}$/g; 

		//react-datepicker expects type Date versus a string
		//to handle input for datepicker, I used a ref and bound a custom event to catch users typing
		//this delivers a string in e.target.value
		mValue = moment(val, 'MM/DD/YYYY');
		
		tmp[name] = mValue;
		if(val.match(dateReg) || val.trim() === ''){
				tmp[name_valid] = true;
			}else{
				tmp[name_valid] = false;  //only set if not default
			}
		
		this.setState(tmp);

	}
	_getDescription(e){
		let val = e.target.getContent();
	}
	_submit(e){
		e.preventDefault();
		
		let {close, dispatch} = this.props;
		let data = {...this.state};
		
		delete data.step;

		for(let i in data){
			if(data.hasOwnProperty(i)){
				if(i.includes('_valid')){
					delete data[i];
				}
			}	
		}

		// data.date_submitted = moment().format('MM/DD/YYYY');
		//data.deadline = data.deadline.format('MM/DD/YYYY');
		//dispatch to store and save to DB
		//alert(data.toSource());
		dispatch(addScholarship(data, close));
		

	}
	
	render(){
		let { step, scholarship_name, website, amount, recurring, nextDue, 
			provider_id, provider_name, contact_fname, contact_lname, provider_phone,
			provider_email, provider_address, provider_city, provider_state, description,
			provider_country, deadline,
			scholarship_name_valid,
			deadline_valid,
			website_valid,
			amount_valid,
			numberof_valid,
			submission_id_valid,
			provider_name_valid,
			contact_fname_valid,
			contact_lname_valid,
			provider_phone_valid,
			provider_email_valid,	
			provider_address_valid,
			provider_zip_valid,
			provider_city_valid,
			country,
			location_country,
			state,
			location_state,
			city,
			location_city,
			startDateTerm,
			interested_in_aid,
			financial,
			typeofschool,
			department,
			specificDepartment_filter,
			gpa_max,sat_min,
			sat_max,
			act_min,
			act_max,
			toefl_min,
			toefl_max,
			ielts_min,
			ielts_max,
			uploads,
			ageMin_filter,
			ageMax_filter,
			gender,
			ethnicity,
			ethnicity_filter,
			religion,
			religion_filter,
			hs_users,
			college_users,
			inMilitary,
			militaryAffiliation,
			profileCompletion,
			
		} = this.state;
		let {close, open, scholarships, setInput} = this.props;
		let {data,countries, providers} = this.state;

		return(
			<div className="addModal">
				<form onSubmit={(e) => this._submit(e)}>
					<div className="close-btn" onClick={close}>&times;</div>
						{/*Step 1*/}
						<div id="step1">
							<div className="title">Step 1 of 3 Scholarship Information</div>
							<div>
								<div className="title2">Scholarship Information</div>
								<div className="clearfix">
									<div className="left-45">
										<input className='' name="scholarship_name" placeholder="Scholarship Name" value='' onChange={(e) => setInput("scholarship_name", e.target.value)} />
										<input className='' name="submission_id" placeholder="Scholarship Submision ID (optional)" value='' onChange={(e) => setInput("submission_id", e.target.value)} />
										<input className='' name="website" placeholder="Website" value='' onChange={(e) => setInput("website", e.target.value)} />
										<input className='' name="amount" placeholder="Max Amount (eg 2000 or 2000.00)"  value='' onChange={(e) => setInput("amount", e.target.value)}/>
										<input className='' name="number" placeholder="Number of Awards (eg 10)"  value='' onChange={(e) => setInput("numberof", e.target.value)}/>
										<DatePicker  className='' placeholderText="Deadline (MM/DD/YYYY)" />
										<select name="reccuring" onChange={(e) => setInput("recurring", e.target.value)}>
											<option value="">Not Recurring</option>
											<option value="1">Monthly</option>
											<option value="2">Yearly</option>
											<option value="3">Biannual</option>
										</select>
										
									</div>
									<div className="right-55">
										<textarea name="description" value='' placeholder="Enter Scholarship description..." onChange={(e) => setInput("description", e.target.value)}/>
									</div>
								</div>
							</div>
							<div className="clearfix mt20">
								<div className="add-sch-form-btn" onClick={nextFun('1','2')}>NEXT</div>
									
							</div>					
						</div>
						{/*Step 1*/}
						{/*Step 3*/}
						<div id="step2" style={{display:'none'}}>	
							<div className="title">Step 2 of 3 Add Targeting</div>
							<div className="title2">Provider Information</div>
							<select className="full" value='' onChange={(e) => setInput("provider_id", e.target.value)}>
								<option value="">New Provider</option>
								
							</select>
							<div>
									<input className='full' name="provider_name" placeholder="Company Name" value='' onChange={(e) => setInput("provider_name", e.target.value)}/>
									<div className="clearfix">
										<div className="left half">
											<input className='' name="contact_fname" placeholder="Contact First Name"  value='' onChange={(e) => setInput("contact_fname", e.target.value)}/>
										</div>
										<div className="right half">
											<input className='' name="contact_lname" placeholder="Contact Last Name" value='' onChange={(e) => setInput("contact_lname", e.target.value)}/>
										</div>
									</div>

									<div className="clearfix">
										<div className="left half">
											<input className='' name="provider_phone" placeholder="Phone" value='' onChange={(e) => setInput("provider_phone", e.target.value)}/>
										</div>
										<div className="right half">
											<input className='' name="provider_email" placeholder="Email" value='' onChange={(e) => setInput("provider_email", e.target.value)}/>
										</div>
									</div>
									<input className='' name="provider_address" placeholder="Address..." value='' onChange={(e) => setInput("provider_address", e.target.value)}/>
									
									<div className="clearfix">	
										<div className="third left">
											<input className='' name="provider_city" placeholder="City" value='' onChange={(e) => setInput("provider_city", e.target.value)}/>
										</div>
										<div className="third left">
											<input name="provider_state" placeholder="State" value='' onChange={(e) => setInput("provider_state", e.target.value)}/>
										</div>
										<div className="third right">
											<input className='' name="provider_zip" placeholder="Zip" value=''  onChange={(e) => setInput("provider_zip", e.target.value)}/>
										</div>
										<select className="full" name="provider_country" value='' onChange={(e) => setInput("provider_country", e.target.value)}>
										
										</select>

									</div>
								</div>
								<div className="clearfix mt20">
									<div className="add-sch-form-btn"  onClick={nextFun('2','3')}>NEXT</div>
									<div className="cancel-sch-form-btn"  onClick={nextFun('2','1')}>BACK</div>
								</div>
							</div>
						{/*Step 3*/}
					</form>
			</div>
		);
	}
}

const mapStateToProps = (state, props) => {
	return{
		scholarships: state.scholarships
	}
}

export default connect(mapStateToProps)(AddModal);